// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: booking.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingClient is the client API for Booking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingClient interface {
	RegisterSearchFlight(ctx context.Context, in *SearchFlightRequest, opts ...grpc.CallOption) (*SearchFlightResponse, error)
	RegisterSearchSelect(ctx context.Context, in *SearchSelectRequest, opts ...grpc.CallOption) (*SearchSelectResponse, error)
	RegisterTravellerDetails(ctx context.Context, in *TravellerRequest, opts ...grpc.CallOption) (*TravellerResponse, error)
	RegisterLoginRequest(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RegisterUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	VerifyUser(ctx context.Context, in *OTPRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type bookingClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingClient(cc grpc.ClientConnInterface) BookingClient {
	return &bookingClient{cc}
}

func (c *bookingClient) RegisterSearchFlight(ctx context.Context, in *SearchFlightRequest, opts ...grpc.CallOption) (*SearchFlightResponse, error) {
	out := new(SearchFlightResponse)
	err := c.cc.Invoke(ctx, "/Booking/RegisterSearchFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) RegisterSearchSelect(ctx context.Context, in *SearchSelectRequest, opts ...grpc.CallOption) (*SearchSelectResponse, error) {
	out := new(SearchSelectResponse)
	err := c.cc.Invoke(ctx, "/Booking/RegisterSearchSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) RegisterTravellerDetails(ctx context.Context, in *TravellerRequest, opts ...grpc.CallOption) (*TravellerResponse, error) {
	out := new(TravellerResponse)
	err := c.cc.Invoke(ctx, "/Booking/RegisterTravellerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) RegisterLoginRequest(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/Booking/RegisterLoginRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) RegisterUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/Booking/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) VerifyUser(ctx context.Context, in *OTPRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/Booking/VerifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServer is the server API for Booking service.
// All implementations must embed UnimplementedBookingServer
// for forward compatibility
type BookingServer interface {
	RegisterSearchFlight(context.Context, *SearchFlightRequest) (*SearchFlightResponse, error)
	RegisterSearchSelect(context.Context, *SearchSelectRequest) (*SearchSelectResponse, error)
	RegisterTravellerDetails(context.Context, *TravellerRequest) (*TravellerResponse, error)
	RegisterLoginRequest(context.Context, *LoginRequest) (*LoginResponse, error)
	RegisterUser(context.Context, *UserRequest) (*UserResponse, error)
	VerifyUser(context.Context, *OTPRequest) (*UserResponse, error)
	mustEmbedUnimplementedBookingServer()
}

// UnimplementedBookingServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServer struct {
}

func (UnimplementedBookingServer) RegisterSearchFlight(context.Context, *SearchFlightRequest) (*SearchFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSearchFlight not implemented")
}
func (UnimplementedBookingServer) RegisterSearchSelect(context.Context, *SearchSelectRequest) (*SearchSelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSearchSelect not implemented")
}
func (UnimplementedBookingServer) RegisterTravellerDetails(context.Context, *TravellerRequest) (*TravellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTravellerDetails not implemented")
}
func (UnimplementedBookingServer) RegisterLoginRequest(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLoginRequest not implemented")
}
func (UnimplementedBookingServer) RegisterUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedBookingServer) VerifyUser(context.Context, *OTPRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUser not implemented")
}
func (UnimplementedBookingServer) mustEmbedUnimplementedBookingServer() {}

// UnsafeBookingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServer will
// result in compilation errors.
type UnsafeBookingServer interface {
	mustEmbedUnimplementedBookingServer()
}

func RegisterBookingServer(s grpc.ServiceRegistrar, srv BookingServer) {
	s.RegisterService(&Booking_ServiceDesc, srv)
}

func _Booking_RegisterSearchFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).RegisterSearchFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/RegisterSearchFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).RegisterSearchFlight(ctx, req.(*SearchFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_RegisterSearchSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).RegisterSearchSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/RegisterSearchSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).RegisterSearchSelect(ctx, req.(*SearchSelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_RegisterTravellerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TravellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).RegisterTravellerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/RegisterTravellerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).RegisterTravellerDetails(ctx, req.(*TravellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_RegisterLoginRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).RegisterLoginRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/RegisterLoginRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).RegisterLoginRequest(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).RegisterUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_VerifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).VerifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/VerifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).VerifyUser(ctx, req.(*OTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Booking_ServiceDesc is the grpc.ServiceDesc for Booking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Booking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Booking",
	HandlerType: (*BookingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSearchFlight",
			Handler:    _Booking_RegisterSearchFlight_Handler,
		},
		{
			MethodName: "RegisterSearchSelect",
			Handler:    _Booking_RegisterSearchSelect_Handler,
		},
		{
			MethodName: "RegisterTravellerDetails",
			Handler:    _Booking_RegisterTravellerDetails_Handler,
		},
		{
			MethodName: "RegisterLoginRequest",
			Handler:    _Booking_RegisterLoginRequest_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Booking_RegisterUser_Handler,
		},
		{
			MethodName: "VerifyUser",
			Handler:    _Booking_VerifyUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking.proto",
}
